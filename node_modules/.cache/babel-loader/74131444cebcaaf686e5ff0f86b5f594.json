{"ast":null,"code":"/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Define generation methods for custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\n// More on generating code:\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\nimport * as Blockly from 'blockly/core';\nimport 'blockly/javascript';\nimport 'blockly/python';\n\nBlockly.JavaScript['test_react_field'] = function (block) {\n  return \"console.log('custom block');\\n\";\n};\n\nBlockly.JavaScript['test_react_date_field'] = function (block) {\n  return 'console.log(' + block.getField('DATE').getText() + ');\\n';\n};\n\nBlockly.Python['ptnlp_word_tokenize_import'] = function (block) {\n  var code = 'from pythainlp.tokenize import word_tokenize\\n';\n  return code;\n};\n\nBlockly.Python['ptnlp_tokenize_word'] = function (block) {\n  var value_text_input = Blockly.Python.valueToCode(block, 'TEXT_INPUT', Blockly.Python.ORDER_ATOMIC);\n  var dropdown_engine = block.getFieldValue('ENGINE');\n  console.log(dropdown_engine); //create a multiple replace key by using mapping object\n\n  var mapObj = {\n    TEXT: value_text_input,\n    ENGINES: dropdown_engine\n  };\n  var code = 'word_tokenize(TEXT, engine=ENGINES)\\n'.replace(/TEXT|ENGINES/gi, function (matched) {\n    return mapObj[matched];\n  });\n  return [code, Blockly.Python.ORDER_NONE];\n};","map":{"version":3,"sources":["C:/Users/Goragod Pongthanisor/Desktop/blockly-react/src/generator/generator.js"],"names":["Blockly","JavaScript","block","getField","getText","Python","code","value_text_input","valueToCode","ORDER_ATOMIC","dropdown_engine","getFieldValue","console","log","mapObj","TEXT","ENGINES","replace","matched","ORDER_NONE"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAKA;AACA;AAEA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,OAAO,oBAAP;AACA,OAAO,gBAAP;;AAEAA,OAAO,CAACC,UAAR,CAAmB,kBAAnB,IAAyC,UAAUC,KAAV,EAAiB;AACxD,SAAO,gCAAP;AACD,CAFD;;AAIAF,OAAO,CAACC,UAAR,CAAmB,uBAAnB,IAA8C,UAAUC,KAAV,EAAiB;AAC7D,SAAO,iBAAiBA,KAAK,CAACC,QAAN,CAAe,MAAf,EAAuBC,OAAvB,EAAjB,GAAoD,MAA3D;AACD,CAFD;;AAIAJ,OAAO,CAACK,MAAR,CAAe,4BAAf,IAA+C,UAASH,KAAT,EAAgB;AAC7D,MAAII,IAAI,GAAG,gDAAX;AACA,SAAOA,IAAP;AACD,CAHD;;AAKAN,OAAO,CAACK,MAAR,CAAe,qBAAf,IAAwC,UAASH,KAAT,EAAgB;AACtD,MAAIK,gBAAgB,GAAGP,OAAO,CAACK,MAAR,CAAeG,WAAf,CAA2BN,KAA3B,EAAkC,YAAlC,EAAgDF,OAAO,CAACK,MAAR,CAAeI,YAA/D,CAAvB;AACA,MAAIC,eAAe,GAAGR,KAAK,CAACS,aAAN,CAAoB,QAApB,CAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ,EAHsD,CAItD;;AACA,MAAII,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAER,gBADK;AAEXS,IAAAA,OAAO,EAAEN;AAFE,GAAb;AAIA,MAAIJ,IAAI,GAAG,wCAAwCW,OAAxC,CAAgD,gBAAhD,EAAkE,UAASC,OAAT,EAAkB;AAC7F,WAAOJ,MAAM,CAACI,OAAD,CAAb;AACD,GAFU,CAAX;AAGA,SAAO,CAACZ,IAAD,EAAON,OAAO,CAACK,MAAR,CAAec,UAAtB,CAAP;AACD,CAbD","sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Define generation methods for custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n// More on generating code:\r\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\r\n\r\nimport * as Blockly from 'blockly/core';\r\nimport 'blockly/javascript';\r\nimport 'blockly/python';\r\n\r\nBlockly.JavaScript['test_react_field'] = function (block) {\r\n  return \"console.log('custom block');\\n\";\r\n};\r\n\r\nBlockly.JavaScript['test_react_date_field'] = function (block) {\r\n  return 'console.log(' + block.getField('DATE').getText() + ');\\n';\r\n};\r\n\r\nBlockly.Python['ptnlp_word_tokenize_import'] = function(block) {\r\n  var code = 'from pythainlp.tokenize import word_tokenize\\n';\r\n  return code;\r\n};\r\n\r\nBlockly.Python['ptnlp_tokenize_word'] = function(block) {\r\n  var value_text_input = Blockly.Python.valueToCode(block, 'TEXT_INPUT', Blockly.Python.ORDER_ATOMIC);\r\n  var dropdown_engine = block.getFieldValue('ENGINE');\r\n  console.log(dropdown_engine)\r\n  //create a multiple replace key by using mapping object\r\n  var mapObj = {\r\n    TEXT: value_text_input,\r\n    ENGINES: dropdown_engine\r\n  };\r\n  var code = 'word_tokenize(TEXT, engine=ENGINES)\\n'.replace(/TEXT|ENGINES/gi, function(matched) {\r\n    return mapObj[matched];\r\n  });\r\n  return [code, Blockly.Python.ORDER_NONE];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}