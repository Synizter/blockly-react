{"ast":null,"code":"/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\nimport * as Blockly from 'blockly/core'; // Since we're using json to initialize the field, we'll need to import it.\n\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\nvar testReactField = {\n  type: 'test_react_field',\n  message0: 'custom field %1',\n  args0: [{\n    type: 'field_react_component',\n    name: 'FIELD',\n    text: 'Click me'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_field'] = {\n  init: function () {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar reactDateField = {\n  type: 'test_react_date_field',\n  message0: 'date field %1',\n  args0: [{\n    type: 'field_react_date',\n    name: 'DATE',\n    date: '01/01/2020'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_date_field'] = {\n  init: function () {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionForward = {\n  type: 'block_type',\n  message0: 'Temi moves forward',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_forward'] = {\n  init: function () {\n    this.jsonInit(RobotActionForward);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionBackward = {\n  type: 'block_type',\n  message0: 'Temi moves backward',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_backward'] = {\n  init: function () {\n    this.jsonInit(RobotActionBackward);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionLeft = {\n  type: 'block_type',\n  message0: 'Temi moves left',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_left'] = {\n  init: function () {\n    this.jsonInit(RobotActionLeft);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionRight = {\n  type: 'block_type',\n  message0: 'Temi moves right',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_right'] = {\n  init: function () {\n    this.jsonInit(RobotActionRight);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionSpeak = {\n  \"type\": \"block_type\",\n  \"message0\": \"Temi Speak %1 %2\",\n  \"args0\": [{\n    \"type\": \"input_value\",\n    \"name\": \"TTS\",\n    \"check\": \"String\"\n  }, {\n    \"type\": \"field_dropdown\",\n    \"name\": \"LANG\",\n    \"options\": [[\"English\", \"EN\"], [\"Thai\", \"TH\"]]\n  }],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['robot_action_speak'] = {\n  init: function () {\n    this.jsonInit(RobotActionSpeak);\n    this.setStyle('loop_blocks');\n  }\n}; //DUMMY BLOCK\n\nvar dmDialogStart = {\n  \"type\": \"block_type\",\n  \"message0\": \"Temi starts conversation %1 Intention %2 %3\",\n  \"args0\": [{\n    \"type\": \"input_dummy\"\n  }, {\n    \"type\": \"field_dropdown\",\n    \"name\": \"INTENT\",\n    \"options\": [[\"Ask for help\", \"ASK_HELP\"], [\"Ask for direction\", \"ASK_DIR\"], [\"Basic\", \"BASIC\"]]\n  }],\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 20,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_action_start_cov'] = {\n  init: function () {\n    this.jsonInit(dmDialogStart);\n    this.setStyle('loop_blocks');\n  }\n};\nvar dmGotoBase = {\n  \"type\": \"block_type\",\n  \"message0\": \"GO TO BASE\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_goto_base'] = {\n  init: function () {\n    this.jsonInit(dmGotoBase);\n    this.setStyle('loop_blocks');\n  }\n};\nvar dmGotoCounter = {\n  \"type\": \"block_type\",\n  \"message0\": \"GO TO COUNTER\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_goto_counter'] = {\n  init: function () {\n    this.jsonInit(dmGotoCounter);\n    this.setStyle('loop_blocks');\n  }\n};\nvar dmGotoTable = {\n  \"type\": \"block_type\",\n  \"message0\": \"GO TO TABLE\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_goto_table'] = {\n  init: function () {\n    this.jsonInit(dmGotoTable);\n    this.setStyle('loop_blocks');\n  }\n};\nvar dmCallStaff = {\n  \"type\": \"block_type\",\n  \"message0\": \"Call Staff\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_callstaff'] = {\n  init: function () {\n    this.jsonInit(dmCallStaff);\n    this.setStyle('loop_blocks');\n  }\n};","map":{"version":3,"sources":["/Users/goragodp/Project/blockly-react/src/blocks/customblocks.js"],"names":["Blockly","testReactField","type","message0","args0","name","text","previousStatement","nextStatement","Blocks","init","jsonInit","setStyle","reactDateField","date","RobotActionForward","colour","tooltip","helpUrl","RobotActionBackward","RobotActionLeft","RobotActionRight","RobotActionSpeak","dmDialogStart","dmGotoBase","dmGotoCounter","dmGotoTable","dmCallStaff"],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n\nimport * as Blockly from 'blockly/core';\n\n// Since we're using json to initialize the field, we'll need to import it.\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\n\nvar testReactField = {\n  type: 'test_react_field',\n  message0: 'custom field %1',\n  args0: [\n    {\n      type: 'field_react_component',\n      name: 'FIELD',\n      text: 'Click me',\n    },\n  ],\n  previousStatement: null,\n  nextStatement: null,\n};\n\nBlockly.Blocks['test_react_field'] = {\n  init: function () {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar reactDateField = {\n  type: 'test_react_date_field',\n  message0: 'date field %1',\n  args0: [\n    {\n      type: 'field_react_date',\n      name: 'DATE',\n      date: '01/01/2020',\n    },\n  ],\n  previousStatement: null,\n  nextStatement: null,\n};\n\nBlockly.Blocks['test_react_date_field'] = {\n  init: function () {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar RobotActionForward = {\n  type: 'block_type',\n  message0: 'Temi moves forward',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: '',\n};\nBlockly.Blocks['robot_action_move_forward'] = {\n  init: function () {\n    this.jsonInit(RobotActionForward);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar RobotActionBackward = {\n  type: 'block_type',\n  message0: 'Temi moves backward',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: '',\n};\nBlockly.Blocks['robot_action_move_backward'] = {\n  init: function () {\n    this.jsonInit(RobotActionBackward);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar RobotActionLeft = {\n  type: 'block_type',\n  message0: 'Temi moves left',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: '',\n};\nBlockly.Blocks['robot_action_move_left'] = {\n  init: function () {\n    this.jsonInit(RobotActionLeft);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar RobotActionRight = {\n  type: 'block_type',\n  message0: 'Temi moves right',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: '',\n};\nBlockly.Blocks['robot_action_move_right'] = {\n  init: function () {\n    this.jsonInit(RobotActionRight);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar RobotActionSpeak = {\n  \"type\": \"block_type\",\n  \"message0\": \"Temi Speak %1 %2\",\n  \"args0\": [\n    {\n      \"type\": \"input_value\",\n      \"name\": \"TTS\",\n      \"check\": \"String\"\n    },\n    {\n      \"type\": \"field_dropdown\",\n      \"name\": \"LANG\",\n      \"options\": [\n        [\n          \"English\",\n          \"EN\"\n        ],\n        [\n          \"Thai\",\n          \"TH\"\n        ]\n      ]\n    }\n  ],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['robot_action_speak'] = {\n  init: function () {\n    this.jsonInit(RobotActionSpeak);\n    this.setStyle('loop_blocks');\n  },\n};\n\n//DUMMY BLOCK\nvar dmDialogStart = {\n\"type\": \"block_type\",\n\"message0\": \"Temi starts conversation %1 Intention %2 %3\",\n\"args0\": [\n  {\n    \"type\": \"input_dummy\"\n  },\n  {\n    \"type\": \"field_dropdown\",\n    \"name\": \"INTENT\",\n    \"options\": [\n      [\n        \"Ask for help\",\n        \"ASK_HELP\"\n      ],\n      [\n        \"Ask for direction\",\n        \"ASK_DIR\"\n      ],\n      [\n        \"Basic\",\n        \"BASIC\"\n      ]\n    ]\n  }\n],\n\"previousStatement\": null,\n\"nextStatement\": null,\n\"colour\": 20,\n\"tooltip\": \"\",\n\"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_action_start_cov'] = {\n  init: function () {\n    this.jsonInit(dmDialogStart);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar dmGotoBase ={\n    \"type\": \"block_type\",\n    \"message0\": \"GO TO BASE\",\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"colour\": 290,\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  \n};\nBlockly.Blocks['dm_robot_goto_base'] = {\n  init: function () {\n    this.jsonInit(dmGotoBase);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar dmGotoCounter ={\n  \"type\": \"block_type\",\n  \"message0\": \"GO TO COUNTER\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n\n};\nBlockly.Blocks['dm_robot_goto_counter'] = {\ninit: function () {\n  this.jsonInit(dmGotoCounter);\n  this.setStyle('loop_blocks');\n},\n};\nvar dmGotoTable ={\n  \"type\": \"block_type\",\n  \"message0\": \"GO TO TABLE\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['dm_robot_goto_table'] = {\ninit: function () {\n  this.jsonInit(dmGotoTable);\n  this.setStyle('loop_blocks');\n},\n};\n\nvar dmCallStaff ={\n  \"type\": \"block_type\",\n  \"message0\": \"Call Staff\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 290,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n\n};\nBlockly.Blocks['dm_robot_callstaff'] = {\ninit: function () {\n  this.jsonInit(dmCallStaff);\n  this.setStyle('loop_blocks');\n},\n};"]},"metadata":{},"sourceType":"module"}