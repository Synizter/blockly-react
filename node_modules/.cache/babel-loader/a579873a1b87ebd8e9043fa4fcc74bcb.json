{"ast":null,"code":"/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Define custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\nimport * as Blockly from 'blockly/core'; // Since we're using json to initialize the field, we'll need to import it.\n\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\nvar testReactField = {\n  type: 'test_react_field',\n  message0: 'custom field %1',\n  args0: [{\n    type: 'field_react_component',\n    name: 'FIELD',\n    text: 'Click me'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_field'] = {\n  init: function () {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar reactDateField = {\n  type: 'test_react_date_field',\n  message0: 'date field %1',\n  args0: [{\n    type: 'field_react_date',\n    name: 'DATE',\n    date: '01/01/2020'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_date_field'] = {\n  init: function () {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar PTNLPImportTokenize = {\n  \"type\": \"ptnlp_word_tokenize_import\",\n  \"message0\": \"Use word tokenize of pythainlp\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['ptnlp_word_tokenize_import'] = {\n  init: function () {\n    this.jsonInit(PTNLPImportTokenize);\n    this.setStyle('loop_blocks');\n  }\n};\nvar PTNLPTokenizeWord = {\n  \"type\": \"block_type\",\n  \"message0\": \"Tokenize : %1 with engine %2\",\n  \"args0\": [{\n    \"type\": \"input_value\",\n    \"name\": \"TEXT_INPUT\",\n    \"check\": \"String\"\n  }, {\n    \"type\": \"field_dropdown\",\n    \"name\": \"ENGINE\",\n    \"options\": [[\"icu\", \"icu\"], [\"dict\", \"dict\"], [\"pylexto\", \"pylexto\"], [\"mm\", \"mm\"], [\"newmm\", \"newmm\"]]\n  }],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"https://pythainlp.readthedocs.io/en/latest/pythainlp-1-4-thai/\"\n};","map":{"version":3,"sources":["C:/Users/Goragod Pongthanisor/Desktop/blockly-react/src/blocks/customblocks.js"],"names":["Blockly","testReactField","type","message0","args0","name","text","previousStatement","nextStatement","Blocks","init","jsonInit","setStyle","reactDateField","date","PTNLPImportTokenize","PTNLPTokenizeWord"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAKA;AACA;AAEA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB,C,CAEA;;AACA,OAAO,6BAAP;AACA,OAAO,qBAAP;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,kBADa;AAEnBC,EAAAA,QAAQ,EAAE,iBAFS;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,uBADR;AAEEG,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADK,CAHY;AAUnBC,EAAAA,iBAAiB,EAAE,IAVA;AAWnBC,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcAR,OAAO,CAACS,MAAR,CAAe,kBAAf,IAAqC;AACnCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcV,cAAd;AACA,SAAKW,QAAL,CAAc,aAAd;AACD;AAJkC,CAArC;AAOA,IAAIC,cAAc,GAAG;AACnBX,EAAAA,IAAI,EAAE,uBADa;AAEnBC,EAAAA,QAAQ,EAAE,eAFS;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,kBADR;AAEEG,IAAAA,IAAI,EAAE,MAFR;AAGES,IAAAA,IAAI,EAAE;AAHR,GADK,CAHY;AAUnBP,EAAAA,iBAAiB,EAAE,IAVA;AAWnBC,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcAR,OAAO,CAACS,MAAR,CAAe,uBAAf,IAA0C;AACxCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcE,cAAd;AACA,SAAKD,QAAL,CAAc,aAAd;AACD;AAJuC,CAA1C;AAOA,IAAIG,mBAAmB,GAAG;AACxB,UAAQ,4BADgB;AAExB,cAAY,gCAFY;AAGxB,uBAAqB,IAHG;AAIxB,mBAAiB,IAJO;AAKxB,YAAU,GALc;AAMxB,aAAW,EANa;AAOxB,aAAW;AAPa,CAA1B;AASAf,OAAO,CAACS,MAAR,CAAe,4BAAf,IAA+C;AAC7CC,EAAAA,IAAI,EAAE,YAAW;AACf,SAAKC,QAAL,CAAcI,mBAAd;AACA,SAAKH,QAAL,CAAc,aAAd;AACD;AAJ4C,CAA/C;AAOA,IAAII,iBAAiB,GAAG;AACtB,UAAQ,YADc;AAEtB,cAAY,8BAFU;AAGtB,WAAS,CACP;AACE,YAAQ,aADV;AAEE,YAAQ,YAFV;AAGE,aAAS;AAHX,GADO,EAMP;AACE,YAAQ,gBADV;AAEE,YAAQ,QAFV;AAGE,eAAW,CACT,CACE,KADF,EAEE,KAFF,CADS,EAKT,CACE,MADF,EAEE,MAFF,CALS,EAST,CACE,SADF,EAEE,SAFF,CATS,EAaT,CACE,IADF,EAEE,IAFF,CAbS,EAiBT,CACE,OADF,EAEE,OAFF,CAjBS;AAHb,GANO,CAHa;AAoCtB,kBAAgB,IApCM;AAqCtB,uBAAqB,IArCC;AAsCtB,mBAAiB,IAtCK;AAuCtB,YAAU,GAvCY;AAwCtB,aAAW,EAxCW;AAyCtB,aAAW;AAzCW,CAAxB","sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Define custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n// More on defining blocks:\r\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\r\n\r\nimport * as Blockly from 'blockly/core';\r\n\r\n// Since we're using json to initialize the field, we'll need to import it.\r\nimport '../fields/BlocklyReactField';\r\nimport '../fields/DateField';\r\n\r\nvar testReactField = {\r\n  type: 'test_react_field',\r\n  message0: 'custom field %1',\r\n  args0: [\r\n    {\r\n      type: 'field_react_component',\r\n      name: 'FIELD',\r\n      text: 'Click me',\r\n    },\r\n  ],\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n};\r\n\r\nBlockly.Blocks['test_react_field'] = {\r\n  init: function () {\r\n    this.jsonInit(testReactField);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar reactDateField = {\r\n  type: 'test_react_date_field',\r\n  message0: 'date field %1',\r\n  args0: [\r\n    {\r\n      type: 'field_react_date',\r\n      name: 'DATE',\r\n      date: '01/01/2020',\r\n    },\r\n  ],\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n};\r\n\r\nBlockly.Blocks['test_react_date_field'] = {\r\n  init: function () {\r\n    this.jsonInit(reactDateField);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar PTNLPImportTokenize = {\r\n  \"type\": \"ptnlp_word_tokenize_import\",\r\n  \"message0\": \"Use word tokenize of pythainlp\",\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"colour\": 230,\r\n  \"tooltip\": \"\",\r\n  \"helpUrl\": \"\"\r\n}\r\nBlockly.Blocks['ptnlp_word_tokenize_import'] = {\r\n  init: function() {\r\n    this.jsonInit(PTNLPImportTokenize);\r\n    this.setStyle('loop_blocks');\r\n  }\r\n}\r\n\r\nvar PTNLPTokenizeWord = {\r\n  \"type\": \"block_type\",\r\n  \"message0\": \"Tokenize : %1 with engine %2\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"input_value\",\r\n      \"name\": \"TEXT_INPUT\",\r\n      \"check\": \"String\"\r\n    },\r\n    {\r\n      \"type\": \"field_dropdown\",\r\n      \"name\": \"ENGINE\",\r\n      \"options\": [\r\n        [\r\n          \"icu\",\r\n          \"icu\"\r\n        ],\r\n        [\r\n          \"dict\",\r\n          \"dict\"\r\n        ],\r\n        [\r\n          \"pylexto\",\r\n          \"pylexto\"\r\n        ],\r\n        [\r\n          \"mm\",\r\n          \"mm\"\r\n        ],\r\n        [\r\n          \"newmm\",\r\n          \"newmm\"\r\n        ]\r\n      ]\r\n    }\r\n  ],\r\n  \"inputsInline\": true,\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n  \"colour\": 230,\r\n  \"tooltip\": \"\",\r\n  \"helpUrl\": \"https://pythainlp.readthedocs.io/en/latest/pythainlp-1-4-thai/\"\r\n}"]},"metadata":{},"sourceType":"module"}