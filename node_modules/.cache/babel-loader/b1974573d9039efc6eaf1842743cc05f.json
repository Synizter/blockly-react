{"ast":null,"code":"/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Define custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\nimport * as Blockly from 'blockly/core'; // Since we're using json to initialize the field, we'll need to import it.\n\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\nvar testReactField = {\n  type: 'test_react_field',\n  message0: 'custom field %1',\n  args0: [{\n    type: 'field_react_component',\n    name: 'FIELD',\n    text: 'Click me'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_field'] = {\n  init: function () {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar reactDateField = {\n  type: 'test_react_date_field',\n  message0: 'date field %1',\n  args0: [{\n    type: 'field_react_date',\n    name: 'DATE',\n    date: '01/01/2020'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_date_field'] = {\n  init: function () {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionForward = {\n  type: 'block_type',\n  message0: 'Temi moves forward',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_forward'] = {\n  init: function () {\n    this.jsonInit(RobotActionForward);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionBackward = {\n  type: 'block_type',\n  message0: 'Temi moves backward',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_backward'] = {\n  init: function () {\n    this.jsonInit(RobotActionBackward);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionLeft = {\n  type: 'block_type',\n  message0: 'Temi moves left',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_left'] = {\n  init: function () {\n    this.jsonInit(RobotActionLeft);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionRight = {\n  type: 'block_type',\n  message0: 'Temi moves right',\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_move_right'] = {\n  init: function () {\n    this.jsonInit(RobotActionRight);\n    this.setStyle('loop_blocks');\n  }\n};\nvar RobotActionSpeak = {\n  type: 'block_type',\n  message0: 'Temi speaks %1',\n  args0: [{\n    type: 'input_value',\n    name: 'TEXT_TO_SPEACH',\n    check: 'String'\n  }],\n  previousStatement: null,\n  nextStatement: null,\n  colour: 230,\n  tooltip: '',\n  helpUrl: ''\n};\nBlockly.Blocks['robot_action_speak'] = {\n  init: function () {\n    this.jsonInit(RobotActionSpeak);\n    this.setStyle('loop_blocks');\n  }\n};","map":{"version":3,"sources":["C:/Users/Goragod Pongthanisor/Desktop/blockly-react/src/blocks/customblocks.js"],"names":["Blockly","testReactField","type","message0","args0","name","text","previousStatement","nextStatement","Blocks","init","jsonInit","setStyle","reactDateField","date","RobotActionForward","colour","tooltip","helpUrl","RobotActionBackward","RobotActionLeft","RobotActionRight","RobotActionSpeak","check"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAKA;AACA;AAEA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB,C,CAEA;;AACA,OAAO,6BAAP;AACA,OAAO,qBAAP;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,kBADa;AAEnBC,EAAAA,QAAQ,EAAE,iBAFS;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,uBADR;AAEEG,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADK,CAHY;AAUnBC,EAAAA,iBAAiB,EAAE,IAVA;AAWnBC,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcAR,OAAO,CAACS,MAAR,CAAe,kBAAf,IAAqC;AACnCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcV,cAAd;AACA,SAAKW,QAAL,CAAc,aAAd;AACD;AAJkC,CAArC;AAOA,IAAIC,cAAc,GAAG;AACnBX,EAAAA,IAAI,EAAE,uBADa;AAEnBC,EAAAA,QAAQ,EAAE,eAFS;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,kBADR;AAEEG,IAAAA,IAAI,EAAE,MAFR;AAGES,IAAAA,IAAI,EAAE;AAHR,GADK,CAHY;AAUnBP,EAAAA,iBAAiB,EAAE,IAVA;AAWnBC,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcAR,OAAO,CAACS,MAAR,CAAe,uBAAf,IAA0C;AACxCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcE,cAAd;AACA,SAAKD,QAAL,CAAc,aAAd;AACD;AAJuC,CAA1C;AAOA,IAAIG,kBAAkB,GAAG;AACvBb,EAAAA,IAAI,EAAE,YADiB;AAEvBC,EAAAA,QAAQ,EAAE,oBAFa;AAGvBI,EAAAA,iBAAiB,EAAE,IAHI;AAIvBC,EAAAA,aAAa,EAAE,IAJQ;AAKvBQ,EAAAA,MAAM,EAAE,GALe;AAMvBC,EAAAA,OAAO,EAAE,EANc;AAOvBC,EAAAA,OAAO,EAAE;AAPc,CAAzB;AASAlB,OAAO,CAACS,MAAR,CAAe,2BAAf,IAA8C;AAC5CC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcI,kBAAd;AACA,SAAKH,QAAL,CAAc,aAAd;AACD;AAJ2C,CAA9C;AAOA,IAAIO,mBAAmB,GAAG;AACxBjB,EAAAA,IAAI,EAAE,YADkB;AAExBC,EAAAA,QAAQ,EAAE,qBAFc;AAGxBI,EAAAA,iBAAiB,EAAE,IAHK;AAIxBC,EAAAA,aAAa,EAAE,IAJS;AAKxBQ,EAAAA,MAAM,EAAE,GALgB;AAMxBC,EAAAA,OAAO,EAAE,EANe;AAOxBC,EAAAA,OAAO,EAAE;AAPe,CAA1B;AASAlB,OAAO,CAACS,MAAR,CAAe,4BAAf,IAA+C;AAC7CC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcQ,mBAAd;AACA,SAAKP,QAAL,CAAc,aAAd;AACD;AAJ4C,CAA/C;AAOA,IAAIQ,eAAe,GAAG;AACpBlB,EAAAA,IAAI,EAAE,YADc;AAEpBC,EAAAA,QAAQ,EAAE,iBAFU;AAGpBI,EAAAA,iBAAiB,EAAE,IAHC;AAIpBC,EAAAA,aAAa,EAAE,IAJK;AAKpBQ,EAAAA,MAAM,EAAE,GALY;AAMpBC,EAAAA,OAAO,EAAE,EANW;AAOpBC,EAAAA,OAAO,EAAE;AAPW,CAAtB;AASAlB,OAAO,CAACS,MAAR,CAAe,wBAAf,IAA2C;AACzCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcS,eAAd;AACA,SAAKR,QAAL,CAAc,aAAd;AACD;AAJwC,CAA3C;AAOA,IAAIS,gBAAgB,GAAG;AACrBnB,EAAAA,IAAI,EAAE,YADe;AAErBC,EAAAA,QAAQ,EAAE,kBAFW;AAGrBI,EAAAA,iBAAiB,EAAE,IAHE;AAIrBC,EAAAA,aAAa,EAAE,IAJM;AAKrBQ,EAAAA,MAAM,EAAE,GALa;AAMrBC,EAAAA,OAAO,EAAE,EANY;AAOrBC,EAAAA,OAAO,EAAE;AAPY,CAAvB;AASAlB,OAAO,CAACS,MAAR,CAAe,yBAAf,IAA4C;AAC1CC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcU,gBAAd;AACA,SAAKT,QAAL,CAAc,aAAd;AACD;AAJyC,CAA5C;AAOA,IAAIU,gBAAgB,GAAG;AACrBpB,EAAAA,IAAI,EAAE,YADe;AAErBC,EAAAA,QAAQ,EAAE,gBAFW;AAGrBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,aADR;AAEEG,IAAAA,IAAI,EAAE,gBAFR;AAGEkB,IAAAA,KAAK,EAAE;AAHT,GADK,CAHc;AAUrBhB,EAAAA,iBAAiB,EAAE,IAVE;AAWrBC,EAAAA,aAAa,EAAE,IAXM;AAYrBQ,EAAAA,MAAM,EAAE,GAZa;AAarBC,EAAAA,OAAO,EAAE,EAbY;AAcrBC,EAAAA,OAAO,EAAE;AAdY,CAAvB;AAgBAlB,OAAO,CAACS,MAAR,CAAe,oBAAf,IAAuC;AACrCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcW,gBAAd;AACA,SAAKV,QAAL,CAAc,aAAd;AACD;AAJoC,CAAvC","sourcesContent":["/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Define custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n// More on defining blocks:\r\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\r\n\r\nimport * as Blockly from 'blockly/core';\r\n\r\n// Since we're using json to initialize the field, we'll need to import it.\r\nimport '../fields/BlocklyReactField';\r\nimport '../fields/DateField';\r\n\r\nvar testReactField = {\r\n  type: 'test_react_field',\r\n  message0: 'custom field %1',\r\n  args0: [\r\n    {\r\n      type: 'field_react_component',\r\n      name: 'FIELD',\r\n      text: 'Click me',\r\n    },\r\n  ],\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n};\r\n\r\nBlockly.Blocks['test_react_field'] = {\r\n  init: function () {\r\n    this.jsonInit(testReactField);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar reactDateField = {\r\n  type: 'test_react_date_field',\r\n  message0: 'date field %1',\r\n  args0: [\r\n    {\r\n      type: 'field_react_date',\r\n      name: 'DATE',\r\n      date: '01/01/2020',\r\n    },\r\n  ],\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n};\r\n\r\nBlockly.Blocks['test_react_date_field'] = {\r\n  init: function () {\r\n    this.jsonInit(reactDateField);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar RobotActionForward = {\r\n  type: 'block_type',\r\n  message0: 'Temi moves forward',\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n  colour: 230,\r\n  tooltip: '',\r\n  helpUrl: '',\r\n};\r\nBlockly.Blocks['robot_action_move_forward'] = {\r\n  init: function () {\r\n    this.jsonInit(RobotActionForward);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar RobotActionBackward = {\r\n  type: 'block_type',\r\n  message0: 'Temi moves backward',\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n  colour: 230,\r\n  tooltip: '',\r\n  helpUrl: '',\r\n};\r\nBlockly.Blocks['robot_action_move_backward'] = {\r\n  init: function () {\r\n    this.jsonInit(RobotActionBackward);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar RobotActionLeft = {\r\n  type: 'block_type',\r\n  message0: 'Temi moves left',\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n  colour: 230,\r\n  tooltip: '',\r\n  helpUrl: '',\r\n};\r\nBlockly.Blocks['robot_action_move_left'] = {\r\n  init: function () {\r\n    this.jsonInit(RobotActionLeft);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar RobotActionRight = {\r\n  type: 'block_type',\r\n  message0: 'Temi moves right',\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n  colour: 230,\r\n  tooltip: '',\r\n  helpUrl: '',\r\n};\r\nBlockly.Blocks['robot_action_move_right'] = {\r\n  init: function () {\r\n    this.jsonInit(RobotActionRight);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n\r\nvar RobotActionSpeak = {\r\n  type: 'block_type',\r\n  message0: 'Temi speaks %1',\r\n  args0: [\r\n    {\r\n      type: 'input_value',\r\n      name: 'TEXT_TO_SPEACH',\r\n      check: 'String',\r\n    },\r\n  ],\r\n  previousStatement: null,\r\n  nextStatement: null,\r\n  colour: 230,\r\n  tooltip: '',\r\n  helpUrl: '',\r\n};\r\nBlockly.Blocks['robot_action_speak'] = {\r\n  init: function () {\r\n    this.jsonInit(RobotActionSpeak);\r\n    this.setStyle('loop_blocks');\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}